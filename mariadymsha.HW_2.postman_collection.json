first

//Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

//Проверить, что в body приходит правильный string.
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.eql("This is the first responce from server!");
});

user_info_3

// Спарсить response body в json
let jsonData = pm.response.json();

let res_name = jsonData.name;
let res_age = jsonData.age;
let res_salary = jsonData.salary;
let family = jsonData.family;
let salary_4 = json.family.u_salary_1_5_year

// Спарсить request
let req = request.data;

let req_name = req.name;
let req_age = req.age;
let req_salary = req.salary;
let req_salary_1_5 = req.salary * 4;

// Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

//Проверить, что name в ответе равно name s request (name вбить руками)
pm.test("Correct name", function () {
    pm.expect(res_name).to.eql("Maria");
});

// Проверить, что age в ответе равно age s request (age вбить руками)
pm.test("Correct age", function () {
    pm.expect(res_age.to.eql("24"));
});

// Проверить, что salary в ответе равно salary s request (salary вбить руками)
pm.test("Correct salary", function () {
    pm.expect(res_salary.to.eql(5000));
});

// Проверить, что name в ответе равно name s request (name забрать из request)
pm.test("Correct req_name", function () {
    pm.expect(res_name).to.eql(req_name);
});

//  Проверить, что age в ответе равно age s request (age забрать из request)
pm.test("Correct req_age", function () {
    pm.expect(res_age).to.eql(req_age);
});

// Проверить, что salary в ответе равно salary s request (salary забрать из request)
pm.test("Correct req_salary", function () {
    pm.expect(res_salary).to.eql(req_salary);
});

//Вывести в консоль параметр family из response
console.log("response_family -", family)

//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("Correct u_salary_1_5_year", function () {
    pm.expect(req_salary_1_5).to.eql(salary_4);
});
object_info_3

// Спарсить response body в json
let jsonData = pm. response.json();

let res_name = jsonData.name;
let res_age = jsonData.age;
let res_salary = String(jsonData.salary);
let res_family = jsonData.family;
let res_dog = jsonData.family.pets.dog;
let res_name_dog = jsonData.family.pets.dog.name;
let res_age_dog = jsonData.family.pets.dog.age;

// Спарсить request
let req = request.url.query.toObject();

let req_name = req.name;
let req_age = req.age;
let req_salary = req.salary;

// Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

//Проверить, что name в ответе равно name s request (name забрать из request)
pm.test("Name", function () {
    pm.expect(res_name).to.eql(req_name);
});

// Проверить, что age в ответе равно age s request (age забрать из request)
pm.test("Age", function () {
    pm.expect(res_age).to.eql(req_age);
});

// Проверить, что salary в ответе равно salary s request (salary забрать из request)
pm.test("Salary", function () {
    pm.expect(res_salary).to.eql(req_salary);
});

// Вывести в консоль параметр family из response
console.log("response_family -", family)

// Проверить, что у параметра dog есть параметры name
pm.test("Dog_name", function () {
    pm.expect(JSON.stringify(res_name_dog)).to.include(name);
});

//Проверить, что у параметра dog есть параметры age
pm.test("Dog_age", function () {
    pm.expect(JSON.stringify(res_age_dog)).to.include(age);
});

// Проверить, что параметр name имеет значение Luky
pm.test("Correct_Name", function () {
    pm.expect(res_name_dog).to.eql(Luky);
});

// Проверить, что параметр age имеет значение 4
pm.test("Correct_Age", function () {
    pm.expect(res_age_dog).to.eql(4);
});


object_info_4

// Спарсить response body в json
let jsonData = pm. response.json();

let res_name = jsonData.name;
let res_age =String(jsonData.age);
let res_salary = jsonData.salary;

// Спарсить request
let req = request.url.query.toObject();

let req_name = req.name;
let req_age = req.age;
let req_salary = req.salary;

// Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

//Проверить, что name в ответе равно name s request (name забрать из request)
pm.test("Name", function () {
    pm.expect(res_name).to.eql(req_name);
});

// Проверить, что age в ответе равно age из request (age забрать из request)
pm.test("Age", function () {
    pm.expect(res_age).to.eql(req_age);
});

// Вывести в консоль параметр salary из request
console.log("request_salary -",  req_salary)

// Вывести в консоль параметр salary из response
console.log("response_salary -", res_salary)

// Вывести в консоль 0-й элемент параметра salary из response
console.log("response_salary_0 -", res_salary[0] )

// Вывести в консоль 1-й элемент параметра salary из response
console.log("response_salary_1 -", res_salary[1] )

// Вывести в консоль 2-й элемент параметра salary из response
console.log("response_salary_2 -", res_salary[2] )

//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)
pm.test("Equality_salary_0", function () {
    pm.expect(String(res_salary[0])).to.eql(req_salary);
});


//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)
pm.test("Equality_salary_1", function () {
    pm.expect(String(res_salary[1])).to.eql(req_salary*2);
});

// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)
pm.test("Equality_salary_2", function () {
    pm.expect(String(res_salary[2])).to.eql(req_salary*3);
});

// Создать в окружении переменную name
pm.environment.set("name", req.name);
// Создать в окружении переменную age
pm.environment.set("age", req.age);
// Создать в окружении переменную salary
pm.environment.set("salary", req.salary);

// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary
res_salary.forEach((item) => {console.log(item)});

user_info_2

// Спарсить response body в json
let jsonData = pm. response.json();

let start_salary = jsonData.start.qa.salary;
let month_6_salary = jsonData.qa_salary_after_6_months;
let month_12_salary = jsonData.qa_salary_after_12_months;
let month_15_salary = jsonData["qa_salary_after_1.5_year"];
let month_35_salary = jsonData["qa_salary_after_3.5_years"];
let person_u_name = jsonData.person.u_name;
let person_u_age = jsonData.person.u_age;
let salary_5_years = jsonData.person.u_salary_5_year;

// Спарсить request
let req = request.data;

let req_salary = req.salary;
let req_age = req.age;


// Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// Проверить, что json response имеет параметр start_qa_salary
pm.test("Check_1", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("start_qa_salary");
});

// Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Check_2", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_6_months");
});

// Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Check_3", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_12_months");
});

// Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Check_4", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_1.5_year");
});

// Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("Check_4", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_3.5_years");
});

//Проверить, что json response имеет параметр person
pm.test("Check_5", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("person");
});

//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)
pm.test("Correct_salary_1", function () {
    pm.expect(String(start_salary)).to.eql(req.salary);
});

// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)
pm.test("Correct_salary_2", function () {
    pm.expect(month_6_salary).to.eql(req.salary*2);
});

// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)
pm.test("Correct_salary_3", function () {
    pm.expect(month_12_salary).to.eql(req.salary*2.7);
});

// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)
pm.test("Correct_salary_4", function () {
    pm.expect(month_15_salary).to.eql(req.salary*3.3);
});

// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)
pm.test("Correct_salary_5", function () {
    pm.expect(month_35_salary).to.eql(req.salary*3.8);
});

// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)
pm.test("Person_name", function () {
    pm.expect(String(person_u_name[1])).to.eql(req.salary);
});

// Проверить, что что параметр u_age равен age из request (age забрать из request)
pm.test("Person_age", function () {
    pm.expect(String(person_u_age)).to.eql(req.age);
});

// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)
pm.test("Future_salary", function () {
    pm.expect(salary_5_years).to.eql(req.salary*4.2);
});
